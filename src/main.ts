const allConstants = require('./constants.ts');

module.exports = {
    WeakPasswordChecker: function (rawPassword, passwordLength) {
        let status = true;

        try {
            if (!rawPassword || !passwordLength) {
                return !status;
            } else {
                try {
                    if (!(passwordLength === rawPassword.length && passwordLength >= 10)) {
                        return !status;
                    } else {
                        allConstants.getCommonWords().forEach((word) => {
                            if (rawPassword.includes(word)) {
                                status = false;
                            }
                        });

                        if (status) {
                            // check if it contains special characters, digit, small and capital letters
                            const regExp = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\s).{8,15}$/;
                            if (!rawPassword.match(regExp)) {
                                status = false;
                            }
                        }
                        return status;
                    }
                } catch (e) {
                    console.log("SecurePasswordUtility::: ", e.message);
                }
            }
        } catch (e) {
            console.log("SecurePasswordUtility::: ", e.message);
            return status;
        }
    },
    StrongPasswordGenerator: function (passwordLength) {
        let autoGeneratedPassword, upperCaseGenerator, lowerCaseGenerator, numericGenerator, characterGenerator, optionalCharacter;
        let uCaseLength = 4, lCaseLength = 4, nCaseLength = 4, cCaseLength =4;
        //get lower case alphabets
        //get uppercase alphabets
        //get numbers
        //get special chars
        //use length 12+

        const upperCase  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for ( let i = 0; i < uCaseLength; i++ ) {
            upperCaseGenerator += upperCase.charAt(Math.floor(Math.random() *
                upperCase.length));
        }
        const lowerCase  = 'abcdefghijklmnopqrstuvwxyz';
        for ( let j = 0; j < lCaseLength; j++ ) {
            lowerCaseGenerator += lowerCase.charAt(Math.floor(Math.random() *
                lowerCase.length));
        }
        const allNumbers  = '0123456789';
        for ( let k = 0; k < nCaseLength; k++ ) {
            numericGenerator += allNumbers.charAt(Math.floor(Math.random() *
                allNumbers.length));
        }
        const specialChars  = '#$!@&%+=?';
        for ( let z = 0; z < cCaseLength; z++ ) {
            characterGenerator += specialChars.charAt(Math.floor(Math.random() *
                specialChars.length));
        }

        let scrambledPassword = upperCaseGenerator + lowerCaseGenerator + numericGenerator + characterGenerator;


        if(!(passwordLength/3===0)) {
            let randomCharacterLength = passwordLength/3;
            const lowerCase  = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            for ( let x = 0; x < randomCharacterLength; x++ ) {
                optionalCharacter += lowerCase.charAt(Math.floor(Math.random() *
                    lowerCase.length));
            }
            scrambledPassword = scrambledPassword.concat(optionalCharacter);
        }
        for ( let b = 0; b < passwordLength; b++ ) {
            autoGeneratedPassword += scrambledPassword.charAt(Math.floor(Math.random() *
                scrambledPassword.length));
        }
        return autoGeneratedPassword;
    },
    CreateStrongPassword: function (codeLength) {
        let createNewPassword = this.StrongPasswordGenerator(codeLength);
        if(this.WeakPasswordChecker(createNewPassword, codeLength)) {
            return createNewPassword;
        } else {
            this.CreateStrongPassword(codeLength);
        }
    }
}
